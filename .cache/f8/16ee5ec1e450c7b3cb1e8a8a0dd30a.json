{"id":"index.html","dependencies":[{"name":"/home/oladiniabayomi/Documents/code-development/practice/redux-basic/package.json","includedInParent":true,"mtime":1642106903806}],"generated":{"html":"\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Redux basic example</title>\n    <script src=\"https://unpkg.com/redux@latest/dist/redux.min.js\"></script>\n  </head>\n  <body>\n    <div>\n      <p>\n        Clicked: <span id=\"value\">0</span> times\n        <button id=\"increment\">+</button>\n        <button id=\"decrement\">-</button>\n        <button id=\"incrementIfOdd\">Increment if odd</button>\n        <button id=\"incrementAsync\">Increment async</button>\n      </p>\n    </div>\n    <script>function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Define an initial state value for the app\nvar initialState = {\n  value: 0\n}; // Create a \"reducer\" function that determines what the new state\n// should be when something happens in the app\n\nfunction counterReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  // Reducers usually look at the type of action that happened\n  // to decide how to update the state\n  switch (action.type) {\n    case \"counter/incremented\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        value: state.value + 1\n      });\n\n    case \"counter/decremented\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        value: state.value - 1\n      });\n\n    default:\n      // If the reducer doesn't care about this action type,\n      // return the existing state unchanged\n      return state;\n  }\n} // Create a new Redux store with the `createStore` function,\n// and use the `counterReducer` for the update logic\n\n\nvar store = Redux.createStore(counterReducer); // Our \"user interface\" is some text in a single HTML element\n\nvar valueEl = document.getElementById(\"value\"); // Whenever the store state changes, update the UI by\n// reading the latest store state and showing new data\n\nfunction render() {\n  var state = store.getState();\n  valueEl.innerHTML = state.value.toString();\n} // Update the UI with the initial data\n\n\nrender(); // And subscribe to redraw whenever the data changes in the future\n\nstore.subscribe(render); // Handle user inputs by \"dispatching\" action objects,\n// which should describe \"what happened\" in the app\n\ndocument.getElementById(\"increment\").addEventListener(\"click\", function () {\n  store.dispatch({\n    type: \"counter/incremented\"\n  });\n});\ndocument.getElementById(\"decrement\").addEventListener(\"click\", function () {\n  store.dispatch({\n    type: \"counter/decremented\"\n  });\n});\ndocument.getElementById(\"incrementIfOdd\").addEventListener(\"click\", function () {\n  // We can write logic to decide what to do based on the state\n  if (store.getState().value % 2 !== 0) {\n    store.dispatch({\n      type: \"counter/incremented\"\n    });\n  }\n});\ndocument.getElementById(\"incrementAsync\").addEventListener(\"click\", function () {\n  // We can also write async logic that interacts with the store\n  setTimeout(function () {\n    store.dispatch({\n      type: \"counter/incremented\"\n    });\n  }, 1000);\n});</script>\n  </body>\n</html>\n"},"sourceMaps":null,"error":null,"hash":"2a7b09424524a4a3bde900946429ca31","cacheData":{"env":{}}}